import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Plus, FileText, Wand2 } from 'lucide-react';
import { StarlinkInvoice, StarlinkClient } from '../../types/starlink';
import { invoiceService } from '../../services/invoiceService';
import { formatPrice } from '../../utils/formatters';
import { Button } from '../ui/button';
import CreateInvoiceForm from './CreateInvoiceForm';
import { useAuth } from '../../hooks/useAuth';

interface StarlinkInvoicesProps {
  clientId: string;
  userId: string;
  client: StarlinkClient;
}

const StarlinkInvoices: React.FC<StarlinkInvoicesProps> = ({
  clientId,
  userId,
  client
}) => {
  const [invoices, setInvoices] = useState<StarlinkInvoice[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [autoGeneratedInvoice, setAutoGeneratedInvoice] = useState<Partial<StarlinkInvoice> | null>(null);
  const { user } = useAuth();

  useEffect(() => {
    if (user?.isAdmin) {
      fetchInvoices();
    } else {
      setError("Vous devez être administrateur pour accéder aux factures");
      setIsLoading(false);
    }
  }, [clientId, user]);

  const fetchInvoices = async () => {
    if (!clientId) {
      setError("ID client non valide");
      setIsLoading(false);
      return;
    }

    if (!user?.isAdmin) {
      setError("Droits administrateur requis");
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);
      console.log('Récupération des factures pour le client:', clientId);
      const fetchedInvoices = await invoiceService.getClientInvoices(clientId);
      console.log('Factures récupérées:', fetchedInvoices);
      setInvoices(fetchedInvoices);
    } catch (error) {
      console.error('Erreur lors de la récupération des factures:', error);
      setError("Erreur lors du chargement des factures");
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateInvoice = () => {
    if (!user?.isAdmin) {
      setError("Droits administrateur requis");
      return;
    }
    setShowCreateForm(true);
    setAutoGeneratedInvoice(null);
  };

  const handleGenerateInvoice = () => {
    if (!user?.isAdmin) {
      setError("Droits administrateur requis");
      return;
    }
    const newInvoice: Partial<StarlinkInvoice> = {
      clientId,
      amount: client.amount,
      currency: client.currency,
      status: 'pending',
      dueDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // Due dans 15 jours
      items: [
        {
          description: `Service Starlink - Abonnement mensuel`,
          amount: client.amount,
          quantity: 1
        }
      ],
      notes: 'Facture générée automatiquement'
    };

    setAutoGeneratedInvoice(newInvoice);
    setShowCreateForm(true);
  };

  const handleCloseForm = () => {
    setShowCreateForm(false);
    setAutoGeneratedInvoice(null);
    fetchInvoices(); // Rafraîchir la liste après création
  };

  const handleStatusUpdate = async (invoiceId: string, newStatus: StarlinkInvoice['status']) => {
    if (!user?.isAdmin) {
      setError("Droits administrateur requis");
      return;
    }
    try {
      await invoiceService.updateInvoiceStatus(invoiceId, newStatus, userId);
      fetchInvoices(); // Rafraîchir la liste après mise à jour
    } catch (error) {
      console.error('Erreur lors de la mise à jour du statut:', error);
      setError("Erreur lors de la mise à jour du statut");
    }
  };

  const formatDate = (date: Date) => {
    return new Date(date).toLocaleDateString('fr-FR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const getStatusColor = (status: StarlinkInvoice['status']) => {
    switch (status) {
      case 'paid':
        return 'bg-green-100 text-green-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'overdue':
        return 'bg-red-100 text-red-800';
      case 'cancelled':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="w-8 h-8 border-2 border-blue-600/20 border-t-blue-600 rounded-full animate-spin" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
        <p className="text-red-600">{error}</p>
        <Button
          onClick={fetchInvoices}
          className="mt-4"
          variant="outline"
        >
          Réessayer
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-medium">Factures</h3>
        <div className="flex gap-2">
          <Button
            onClick={handleCreateInvoice}
            className="flex items-center gap-2"
          >
            <Plus className="w-4 h-4" />
            Nouvelle facture
          </Button>
          <Button
            onClick={handleGenerateInvoice}
            variant="outline"
            className="flex items-center gap-2"
          >
            <Wand2 className="w-4 h-4" />
            Générer
          </Button>
        </div>
      </div>

      {showCreateForm && (
        <CreateInvoiceForm
          clientId={clientId}
          userId={userId}
          onClose={handleCloseForm}
          initialData={autoGeneratedInvoice}
        />
      )}

      {invoices.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          Aucune facture disponible
        </div>
      ) : (
        <div className="grid gap-4">
          {invoices.map((invoice) => (
            <motion.div
              key={invoice.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm"
            >
              <div className="flex justify-between items-start">
                <div>
                  <div className="flex items-center gap-2 mb-2">
                    <FileText className="w-4 h-4 text-gray-400" />
                    <span className="font-medium">{invoice.invoiceNumber}</span>
                  </div>
                  <div className="text-sm text-gray-600">
                    Émise le {formatDate(invoice.createdAt)}
                  </div>
                  <div className="text-sm text-gray-600">
                    Échéance le {formatDate(invoice.dueDate)}
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-lg font-semibold mb-2">
                    {formatPrice(invoice.amount, invoice.currency)}
                  </div>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(invoice.status)}`}>
                    {invoice.status}
                  </span>
                </div>
              </div>

              {invoice.status === 'pending' && (
                <div className="mt-4 flex justify-end gap-2">
                  <Button
                    onClick={() => handleStatusUpdate(invoice.id, 'paid')}
                    variant="outline"
                    size="sm"
                  >
                    Marquer comme payée
                  </Button>
                </div>
              )}
            </motion.div>
          ))}
        </div>
      )}
    </div>
  );
};

export default StarlinkInvoices; 