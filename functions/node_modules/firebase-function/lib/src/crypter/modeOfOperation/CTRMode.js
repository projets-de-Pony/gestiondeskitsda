"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CTRMode = void 0;
const crypto_1 = require("crypto");
const xor_1 = require("../xor");
class CTRMode {
    counter = null;
    incrementCounter() {
        for (let i = 15; i >= 0; i--) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            if (this.counter[i] !== 255) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this.counter[i] += 1;
                break;
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this.counter[i] = 0;
                if (i === 0)
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    this.counter[15] = 0;
            }
        }
    }
    startEncryption() {
        this.counter = (0, crypto_1.randomBytes)(16);
        return new Uint8Array(this.counter);
    }
    combineEncryption(block, encrypt) {
        this.incrementCounter();
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return (0, xor_1.xor)(this.counter, encrypt(block));
    }
    finishEncryption() {
        this.counter = null;
        return new Uint8Array();
    }
    startDecryption() {
        this.counter = null;
        return new Uint8Array();
    }
    combineDecryption(block, decrypt) {
        if (this.counter === null) {
            this.counter = new Uint8Array(block);
            return new Uint8Array();
        }
        this.incrementCounter();
        const decrypted = decrypt((0, xor_1.xor)(this.counter, block));
        return decrypted;
    }
    finishDecryption() {
        this.counter = null;
        return new Uint8Array();
    }
}
exports.CTRMode = CTRMode;
