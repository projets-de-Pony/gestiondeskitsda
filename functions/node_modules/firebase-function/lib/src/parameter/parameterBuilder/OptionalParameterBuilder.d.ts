import type { BaseType, BaseTypeName } from '../BaseType';
import type { ILogger } from '../../logger';
import type { IParameterBuilder } from './IParameterBuilder';
export declare class OptionalParameterBuilder<TypeName extends BaseTypeName, T> implements IParameterBuilder<TypeName | 'undefined', T | undefined> {
    private readonly builder;
    constructor(builder: IParameterBuilder<TypeName, T>);
    get expectedTypes(): Set<TypeName | 'undefined'>;
    build(value: BaseType<TypeName | 'undefined'>, logger: ILogger): T | undefined;
}
