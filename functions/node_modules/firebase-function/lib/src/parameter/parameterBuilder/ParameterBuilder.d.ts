import type { BaseType, BaseTypeName } from '../BaseType';
import type { ILogger } from '../../logger';
import type { IParameterBuilder } from './IParameterBuilder';
export declare class ParameterBuilder<TypeName extends BaseTypeName, T> implements IParameterBuilder<TypeName, T> {
    private readonly typeName;
    private readonly buildParameter;
    constructor(typeName: TypeName, buildParameter: (value: BaseType<TypeName>, logger: ILogger) => T);
    get expectedTypes(): Set<TypeName>;
    build(value: BaseType<TypeName>, logger: ILogger): T;
}
