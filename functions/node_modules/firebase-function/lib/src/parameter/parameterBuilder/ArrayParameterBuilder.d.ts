import type { BaseType, BaseTypeName } from '../BaseType';
import type { ILogger } from '../../logger';
import type { IParameterBuilder } from './IParameterBuilder';
export declare class ArrayParameterBuilder<TypeName extends BaseTypeName, T> implements IParameterBuilder<'object', T[]> {
    private readonly builder;
    private readonly length;
    constructor(builder: IParameterBuilder<TypeName, T>, length?: number | null);
    get expectedTypes(): Set<'object'>;
    build(value: BaseType<'object'>, logger: ILogger): T[];
}
