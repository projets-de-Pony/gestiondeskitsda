"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NullableParameterBuilder = void 0;
const functions = __importStar(require("firebase-functions"));
class NullableParameterBuilder {
    builder;
    constructor(builder) {
        this.builder = builder;
    }
    get expectedTypes() {
        const expectedTypes = new Set(this.builder.expectedTypes);
        expectedTypes.add('object');
        return expectedTypes;
    }
    build(value, logger) {
        logger.log('NullableParameterBuilder.build', { expectedTypes: this.builder.expectedTypes, value: value });
        if (value === null)
            return null;
        if (typeof value === 'object' && !this.builder.expectedTypes.has('object'))
            throw new functions.https.HttpsError('invalid-argument', 'Value is unexpected an object.', logger);
        return this.builder.build(value, logger.nextIndent);
    }
}
exports.NullableParameterBuilder = NullableParameterBuilder;
