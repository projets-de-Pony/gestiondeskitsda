"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayParameterBuilder = void 0;
const functions = __importStar(require("firebase-functions"));
class ArrayParameterBuilder {
    builder;
    length;
    constructor(builder, length = null) {
        this.builder = builder;
        this.length = length;
    }
    get expectedTypes() {
        return new Set(['object']);
    }
    build(value, logger) {
        logger.log('ArrayParameterBuilder.build', { expectedTypes: this.builder.expectedTypes, value: value, length: this.length });
        if (value === null || !Array.isArray(value))
            throw new functions.https.HttpsError('invalid-argument', 'Value is not an array.', logger);
        if (this.length !== null && value.length !== this.length)
            throw new functions.https.HttpsError('invalid-argument', `Value array has not the expectd length ${length}.`, logger);
        return value.map((element, index) => {
            if (!this.builder.expectedTypes.has(typeof element))
                throw new functions.https.HttpsError('invalid-argument', `Array element ${index} has an invalid type: ${typeof element}.`, logger);
            return this.builder.build(element, logger.nextIndent);
        });
    }
}
exports.ArrayParameterBuilder = ArrayParameterBuilder;
