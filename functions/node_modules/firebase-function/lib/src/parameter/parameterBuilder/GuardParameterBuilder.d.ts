import type { BaseType, BaseTypeName } from '../BaseType';
import type { ILogger } from '../../logger';
import type { IParameterBuilder } from './IParameterBuilder';
export declare class GuardParameterBuilder<TypeName extends BaseTypeName, T extends BaseType<TypeName>> implements IParameterBuilder<TypeName, T> {
    private readonly typeName;
    private readonly typeGuard;
    constructor(typeName: TypeName, typeGuard: (value: BaseType<TypeName>, logger: ILogger) => value is T);
    get expectedTypes(): Set<TypeName>;
    build(value: BaseType<TypeName>, logger: ILogger): T;
}
