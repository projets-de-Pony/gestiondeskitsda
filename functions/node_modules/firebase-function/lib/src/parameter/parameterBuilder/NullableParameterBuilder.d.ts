import type { BaseType, BaseTypeName } from '../BaseType';
import type { ILogger } from '../../logger';
import type { IParameterBuilder } from './IParameterBuilder';
export declare class NullableParameterBuilder<TypeName extends BaseTypeName, T> implements IParameterBuilder<TypeName | 'object', T | null> {
    private readonly builder;
    constructor(builder: IParameterBuilder<TypeName, T>);
    get expectedTypes(): Set<TypeName | 'object'>;
    build(value: BaseType<TypeName | 'object'>, logger: ILogger): T | null;
}
