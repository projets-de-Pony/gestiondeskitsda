"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterContainer = void 0;
const functions = __importStar(require("firebase-functions"));
class ParameterContainer {
    data;
    logger;
    constructor(data, logger) {
        this.data = data;
        this.logger = logger;
        this.logger.log('ParameterContainer.constructor', { data: data });
    }
    parameter(key, builder) {
        this.logger.log('ParameterContainer.parameter', { key: key, expectedTypes: builder.expectedTypes });
        // Throw error if key couldn't be found
        if (!(key in this.data) && !builder.expectedTypes.has('undefined'))
            throw new functions.https.HttpsError('invalid-argument', `No ${key} in parameters.`, this.logger);
        const parameter = this.data[key];
        // Throw error if type isn't expected
        if (!builder.expectedTypes.has(typeof parameter))
            throw new functions.https.HttpsError('invalid-argument', `Parameter ${key} has an invalid type: ${typeof parameter}`, this.logger);
        return builder.build(parameter, this.logger.nextIndent);
    }
}
exports.ParameterContainer = ParameterContainer;
