import type * as functions from 'firebase-functions';
import { type FirebaseFunctionConstructor } from './FirebaseFunction';
import { type FirebaseScheduleConstructor } from './FirebaseSchedule';
import { type FirebaseRequestConstructor } from './FirebaseRequest';
import type { SupportedRegion } from 'firebase-functions/v2/options';
import type { CallableFunction, HttpsFunction } from 'firebase-functions/v2/https';
export declare class FirebaseFunctionConstructorWrapper<Parameters, ReturnType> {
    readonly Constructor: FirebaseFunctionConstructor<Parameters, ReturnType>;
    constructor(Constructor: FirebaseFunctionConstructor<Parameters, ReturnType>);
}
export declare class FirebaseScheduleConstructorWrapper {
    readonly Constructor: FirebaseScheduleConstructor;
    readonly schedule: string;
    readonly timezone: string;
    constructor(Constructor: FirebaseScheduleConstructor, schedule: string, timezone: string);
}
export declare class FirebaseRequestConstructorWrapper<Parameters, ReturnType> {
    readonly Constructor: FirebaseRequestConstructor<Parameters, ReturnType>;
    constructor(Constructor: FirebaseRequestConstructor<Parameters, ReturnType>);
}
export type FirebaseFunctions = FirebaseFunctionConstructorWrapper<unknown, unknown> | FirebaseScheduleConstructorWrapper | FirebaseRequestConstructorWrapper<unknown, unknown> | {
    [key: string]: FirebaseFunctions;
};
export declare namespace FirebaseFunctions {
    type IsFunction<Functions extends FirebaseFunctions> = Functions extends FirebaseFunctionConstructorWrapper<unknown, unknown> ? true : Functions extends FirebaseScheduleConstructorWrapper ? false : Functions extends FirebaseRequestConstructorWrapper<unknown, unknown> ? false : false;
    type IsSchedule<Functions extends FirebaseFunctions> = Functions extends FirebaseFunctionConstructorWrapper<unknown, unknown> ? false : Functions extends FirebaseScheduleConstructorWrapper ? true : Functions extends FirebaseRequestConstructorWrapper<unknown, unknown> ? false : false;
    type IsRequest<Functions extends FirebaseFunctions> = Functions extends FirebaseFunctionConstructorWrapper<unknown, unknown> ? false : Functions extends FirebaseScheduleConstructorWrapper ? false : Functions extends FirebaseRequestConstructorWrapper<unknown, unknown> ? true : false;
    type IsRecord<Functions extends FirebaseFunctions> = Functions extends FirebaseFunctionConstructorWrapper<unknown, unknown> ? false : Functions extends FirebaseScheduleConstructorWrapper ? false : Functions extends FirebaseRequestConstructorWrapper<unknown, unknown> ? false : true;
    type FunctionParameters<Functions extends FirebaseFunctions> = Functions extends FirebaseFunctionConstructorWrapper<infer Parameters, unknown> ? Parameters : Functions extends FirebaseScheduleConstructorWrapper ? never : Functions extends FirebaseRequestConstructorWrapper<unknown, unknown> ? never : never;
    type FunctionReturnType<Functions extends FirebaseFunctions> = Functions extends FirebaseFunctionConstructorWrapper<unknown, infer ReturnType> ? ReturnType : Functions extends FirebaseScheduleConstructorWrapper ? never : Functions extends FirebaseRequestConstructorWrapper<unknown, unknown> ? never : never;
    type RequestParameters<Functions extends FirebaseFunctions> = Functions extends FirebaseFunctionConstructorWrapper<unknown, unknown> ? never : Functions extends FirebaseScheduleConstructorWrapper ? never : Functions extends FirebaseRequestConstructorWrapper<infer Parameters, unknown> ? Parameters : never;
    type RequestReturnType<Functions extends FirebaseFunctions> = Functions extends FirebaseFunctionConstructorWrapper<unknown, unknown> ? never : Functions extends FirebaseScheduleConstructorWrapper ? never : Functions extends FirebaseRequestConstructorWrapper<unknown, infer ReturnType> ? ReturnType : never;
}
export type RunnableFirebaseFunctions = CallableFunction<any, any> | functions.CloudFunction<unknown> | HttpsFunction | {
    [key: string]: RunnableFirebaseFunctions;
};
export declare class FirebaseFunctionBuilder {
    function<Parameters, ReturnType>(Constructor: FirebaseFunctionConstructor<Parameters, ReturnType>): FirebaseFunctionConstructorWrapper<Parameters, ReturnType>;
    schedule(Constructor: FirebaseScheduleConstructor, schedule: string, timezone: string): FirebaseScheduleConstructorWrapper;
    request<Parameters, ReturnType>(Constructor: FirebaseRequestConstructor<Parameters, ReturnType>): FirebaseRequestConstructorWrapper<Parameters, ReturnType>;
}
export declare function createFirebaseFunctions<Functions extends FirebaseFunctions>(create: (builder: FirebaseFunctionBuilder) => Functions): Functions;
export declare function provideFirebaseFunctions(firebaseFunctions: FirebaseFunctions, macKey: Uint8Array, regions?: SupportedRegion[]): RunnableFirebaseFunctions;
