import { type ILogger } from '../logger';
import { type Flatten } from '../utils';
import type { ITypeBuilder } from '../typeBuilder';
import { type HttpsFunction } from 'firebase-functions/v2/https';
import type { SupportedRegion } from 'firebase-functions/v2/options';
export interface FirebaseRequest<Parameters, ReturnType> {
    parametersBuilder: ITypeBuilder<Flatten<Parameters>, Parameters>;
    execute(parameters: Parameters): Promise<ReturnType>;
}
export type FirebaseRequestConstructor<Parameters, ReturnType> = new (logger: ILogger) => FirebaseRequest<Parameters, ReturnType>;
export declare namespace FirebaseRequest {
    function create<Parameters, ReturnType>(FirebaseRequest: FirebaseRequestConstructor<Parameters, ReturnType>, macKey: Uint8Array, regions?: SupportedRegion[]): HttpsFunction;
}
