import { type ILogger } from '../logger';
import { type Flatten } from '../utils';
import type { ITypeBuilder } from '../typeBuilder';
import type { SupportedRegion } from 'firebase-functions/v2/options';
import { type CallableFunction } from 'firebase-functions/v2/https';
export interface FirebaseFunction<Parameters, ReturnType> {
    parametersBuilder: ITypeBuilder<Flatten<Parameters>, Parameters>;
    execute(parameters: Parameters): Promise<ReturnType>;
}
export interface AuthUser {
    id: string;
    rawUid: string;
}
export type FirebaseFunctionConstructor<Parameters, ReturnType> = new (user: AuthUser | null, logger: ILogger) => FirebaseFunction<Parameters, ReturnType>;
export declare namespace FirebaseFunction {
    function create<Parameters, ReturnType>(FirebaseFunction: FirebaseFunctionConstructor<Parameters, ReturnType>, macKey: Uint8Array, regions?: SupportedRegion[]): CallableFunction<any, any>;
}
