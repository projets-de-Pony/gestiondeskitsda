"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.provideFirebaseFunctions = exports.createFirebaseFunctions = exports.FirebaseFunctionBuilder = exports.FirebaseRequestConstructorWrapper = exports.FirebaseScheduleConstructorWrapper = exports.FirebaseFunctionConstructorWrapper = void 0;
const FirebaseFunction_1 = require("./FirebaseFunction");
const FirebaseSchedule_1 = require("./FirebaseSchedule");
const FirebaseRequest_1 = require("./FirebaseRequest");
const utils_1 = require("../utils");
class FirebaseFunctionConstructorWrapper {
    Constructor;
    constructor(
    // eslint-disable-next-line @typescript-eslint/naming-convention
    Constructor) {
        this.Constructor = Constructor;
    }
}
exports.FirebaseFunctionConstructorWrapper = FirebaseFunctionConstructorWrapper;
class FirebaseScheduleConstructorWrapper {
    Constructor;
    schedule;
    timezone;
    constructor(
    // eslint-disable-next-line @typescript-eslint/naming-convention
    Constructor, schedule, timezone) {
        this.Constructor = Constructor;
        this.schedule = schedule;
        this.timezone = timezone;
    }
}
exports.FirebaseScheduleConstructorWrapper = FirebaseScheduleConstructorWrapper;
class FirebaseRequestConstructorWrapper {
    Constructor;
    constructor(
    // eslint-disable-next-line @typescript-eslint/naming-convention
    Constructor) {
        this.Constructor = Constructor;
    }
}
exports.FirebaseRequestConstructorWrapper = FirebaseRequestConstructorWrapper;
class FirebaseFunctionBuilder {
    function(
    // eslint-disable-next-line @typescript-eslint/naming-convention
    Constructor) {
        return new FirebaseFunctionConstructorWrapper(Constructor);
    }
    schedule(
    // eslint-disable-next-line @typescript-eslint/naming-convention
    Constructor, schedule, timezone) {
        return new FirebaseScheduleConstructorWrapper(Constructor, schedule, timezone);
    }
    request(
    // eslint-disable-next-line @typescript-eslint/naming-convention
    Constructor) {
        return new FirebaseRequestConstructorWrapper(Constructor);
    }
}
exports.FirebaseFunctionBuilder = FirebaseFunctionBuilder;
function createFirebaseFunctions(create) {
    const builder = new FirebaseFunctionBuilder();
    return create(builder);
}
exports.createFirebaseFunctions = createFirebaseFunctions;
function provideFirebaseFunctions(firebaseFunctions, macKey, regions = []) {
    if (firebaseFunctions instanceof FirebaseFunctionConstructorWrapper)
        return FirebaseFunction_1.FirebaseFunction.create(firebaseFunctions.Constructor, macKey, regions);
    if (firebaseFunctions instanceof FirebaseScheduleConstructorWrapper)
        return FirebaseSchedule_1.FirebaseSchedule.create(firebaseFunctions.Constructor, firebaseFunctions.schedule, firebaseFunctions.timezone, regions);
    if (firebaseFunctions instanceof FirebaseRequestConstructorWrapper)
        return FirebaseRequest_1.FirebaseRequest.create(firebaseFunctions.Constructor, macKey, regions);
    return (0, utils_1.mapRecord)(firebaseFunctions, firebaseFunctions => provideFirebaseFunctions(firebaseFunctions, macKey, regions));
}
exports.provideFirebaseFunctions = provideFirebaseFunctions;
