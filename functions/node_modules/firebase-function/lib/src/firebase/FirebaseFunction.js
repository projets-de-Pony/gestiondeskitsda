"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirebaseFunction = void 0;
const functions = __importStar(require("firebase-functions"));
const logger_1 = require("../logger");
const utils_1 = require("../utils");
const https_1 = require("firebase-functions/v2/https");
const bytesCoder_1 = require("../bytesCoder");
const hasher_1 = require("../hasher");
var FirebaseFunction;
(function (FirebaseFunction_1) {
    function hashUserId(auth) {
        const uidCoder = new bytesCoder_1.Utf8BytesCoder();
        const hasher = new hasher_1.Sha512();
        const userIdCoder = new bytesCoder_1.HexBytesCoder();
        const uidBytes = uidCoder.encode(auth.uid);
        const hashBytes = hasher.hash(uidBytes);
        const userId = userIdCoder.decode(hashBytes);
        return userId;
    }
    function create(
    // eslint-disable-next-line @typescript-eslint/naming-convention
    FirebaseFunction, macKey, regions = []) {
        return (0, https_1.onCall)({ region: regions }, async (request) => {
            const result = await (0, utils_1.execute)(async () => {
                const verboseLogger = 'verboseLogger' in request.data && request.data.verboseLogger === true;
                const logger = logger_1.Logger.start('FirebaseFunction.create', null, 'info', verboseLogger);
                const verified = (0, utils_1.verifyMacTag)(request.data.macTag, request.data.parameters, macKey);
                if (!verified)
                    throw new functions.https.HttpsError('permission-denied', 'Invalid MAC tag');
                const user = request.auth ? { id: hashUserId(request.auth), rawUid: request.auth.uid } : null;
                const firebaseFunction = new FirebaseFunction(user, logger.nextIndent);
                const parameters = firebaseFunction.parametersBuilder.build(request.data.parameters, logger.nextIndent);
                const returnValue = await firebaseFunction.execute(parameters);
                return utils_1.Flattable.flatten(returnValue);
            });
            return result;
        });
    }
    FirebaseFunction_1.create = create;
})(FirebaseFunction = exports.FirebaseFunction || (exports.FirebaseFunction = {}));
