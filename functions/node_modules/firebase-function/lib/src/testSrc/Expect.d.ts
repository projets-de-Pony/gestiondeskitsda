/// <reference types="chai" />
import type * as functions from 'firebase-functions';
import type { Result } from '../utils';
export declare class ExpectToBeDeep<T> {
    readonly value: T;
    constructor(value: T);
    equal(value: T, message?: string): Chai.Assertion;
    unsorted(value: T extends (infer Element)[] ? Element[] : never, message?: string): void;
    private deepEqual;
    private removeUndefined;
}
export declare class ExpectToBe<T> {
    readonly value: T;
    constructor(value: T);
    get deep(): ExpectToBeDeep<T>;
    equal(value: T, message?: string): Chai.Assertion;
    get success(): ExpectToBe<Result.Value<T>> | ExpectToBeDeep<Result.Value<T>>;
    get failure(): ExpectToBeDeep<Result.Error<T>>;
}
export declare class ExpectTo<T> {
    private readonly _value;
    constructor(_value: T);
    get be(): ExpectToBe<T>;
    throw(expected?: string | RegExp | undefined, message?: string): Chai.Assertion;
    throw(firebaseErrorCode: functions.https.FunctionsErrorCode, message?: string): Chai.Assertion;
    awaitThrow(expected?: functions.https.FunctionsErrorCode): Promise<void>;
}
export declare class Expect<T> {
    private readonly _value;
    constructor(_value: T);
    get to(): ExpectTo<T>;
    value<Key extends keyof T>(key: Key): Expect<T[Key]>;
}
export declare function expect<T>(value: T): Expect<T>;
export declare namespace expect {
    function fail(message?: string): never;
}
