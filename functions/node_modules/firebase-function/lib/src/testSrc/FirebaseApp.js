"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirebaseApp = void 0;
const admin = __importStar(require("firebase-admin"));
const app_1 = require("firebase/app");
const functions_1 = require("firebase/functions");
const firestore_1 = require("firebase/firestore");
const auth_1 = require("firebase/auth");
const FirebaseAuthenticator_1 = require("./FirebaseAuthenticator");
const FirebaseFunctionsCaller_1 = require("./FirebaseFunctionsCaller");
class FirebaseApp {
    options;
    functionsInstance;
    authInstance;
    firestore;
    constructor(options) {
        this.options = options;
        process.env.FIRESTORE_EMULATOR_HOST = `localhost:${options.emulatorPorts.firestore}`;
        admin.initializeApp({
            credential: admin.credential.cert(options.firebaseOptions)
        });
        const app = (0, app_1.initializeApp)(options.firebaseOptions);
        this.functionsInstance = (0, functions_1.getFunctions)(app, this.options.region);
        (0, functions_1.connectFunctionsEmulator)(this.functionsInstance, '127.0.0.1', this.options.emulatorPorts.functions);
        this.authInstance = (0, auth_1.getAuth)(app);
        (0, auth_1.connectAuthEmulator)(this.authInstance, `http://127.0.0.1:${this.options.emulatorPorts.auth}`);
        this.firestore = (0, firestore_1.getFirestore)(app);
        (0, firestore_1.connectFirestoreEmulator)(this.firestore, '127.0.0.1', this.options.emulatorPorts.firestore);
    }
    get functions() {
        return new FirebaseFunctionsCaller_1.FirebaseFunctionsCaller(this.options, this.functionsInstance);
    }
    get auth() {
        return new FirebaseAuthenticator_1.FirebaseAuthenticator(this.options, this.authInstance);
    }
}
exports.FirebaseApp = FirebaseApp;
