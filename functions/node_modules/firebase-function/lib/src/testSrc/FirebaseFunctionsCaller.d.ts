import { type Functions as FunctionsInstance } from 'firebase/functions';
import type { FirebaseApp } from './FirebaseApp';
import type { FirebaseFunctions } from '../firebase';
import { type Flatten } from '../utils';
export declare class FirebaseFunctionsCaller<Functions extends FirebaseFunctions> {
    private readonly options;
    private readonly functionsInstance;
    private readonly name;
    constructor(options: FirebaseApp.Options, functionsInstance: FunctionsInstance, name?: string | null);
    function<Key extends FirebaseFunctions.IsRecord<Functions> extends true ? keyof Functions & string : never>(key: Key): FirebaseFunctionsCaller<Functions extends {
        [key: string]: FirebaseFunctions;
    } ? Functions[Key] : never>;
    private createMacTag;
    callFunction(parameters: FirebaseFunctions.FunctionParameters<Functions>): Promise<Flatten<FirebaseFunctions.FunctionReturnType<Functions>>>;
}
