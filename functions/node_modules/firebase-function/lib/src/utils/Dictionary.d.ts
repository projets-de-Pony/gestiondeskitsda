import type { ILogger } from '../logger';
import type { ITypeBuilder } from '../typeBuilder';
import { Flattable, type Flatten } from './Flattable';
export declare class Dictionary<K, T> implements Flattable<Record<string, T>> {
    private readonly dictionary;
    constructor(dictionary?: Record<string, T>);
    get(key: Flatten<K> extends string ? K : never): T;
    set(key: Flatten<K> extends string ? K : never, value: T): void;
    has(key: Flatten<K> extends string ? K : never): boolean;
    get keys(): string[];
    get values(): T[];
    get entries(): {
        key: string;
        value: T;
    }[];
    map<U>(callbackFn: (value: T, key: string) => U): Dictionary<K, U>;
    get flatten(): Record<string, T>;
}
export declare class DictionaryTypeBuilder<V, K, T> implements ITypeBuilder<Record<string, V>, Dictionary<K, T>> {
    private readonly builder;
    constructor(builder: ITypeBuilder<V, T>);
    build(value: Record<string, V>, logger: ILogger): Dictionary<K, T>;
}
