"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtcDate = void 0;
class UtcDate {
    year;
    month;
    day;
    hour;
    minute;
    constructor(year, month, day, hour, minute, timezone = null) {
        this.year = year;
        this.month = month;
        this.day = day;
        this.hour = hour;
        this.minute = minute;
        if (timezone !== null) {
            const date = new Date(this.year, this.month, this.day, this.hour, this.minute);
            const offset = date.getUTCHours() - new Date(date.toLocaleString('en-US', { timeZone: timezone })).getUTCHours();
            this.hour += offset;
        }
    }
    static get now() {
        return UtcDate.fromDate(new Date());
    }
    get toDate() {
        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute));
    }
    get toIsoDate() {
        return this.toDate.toISOString();
    }
    get encoded() {
        const year = this.year.toString();
        const month = this.month <= 9 ? `0${this.month}` : this.month.toString();
        const day = this.day <= 9 ? `0${this.day}` : this.day.toString();
        const hour = this.hour <= 9 ? `0${this.hour}` : this.hour.toString();
        const minute = this.minute <= 9 ? `0${this.minute}` : this.minute.toString();
        return `${year}-${month}-${day}-${hour}-${minute}`;
    }
    static fromDate(date) {
        return new UtcDate(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes());
    }
    static fromIsoDate(date) {
        return UtcDate.fromDate(new Date(date));
    }
    static decode(encodedDate) {
        const regex = /^(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})-(?<hour>\d{2})-(?<minute>\d{2})$/gu;
        const match = regex.exec(encodedDate);
        if (match === null || match.groups === undefined)
            return new UtcDate(0, 0, 0, 0, 0);
        return new UtcDate(Number.parseInt(match.groups.year), Number.parseInt(match.groups.month), Number.parseInt(match.groups.day), Number.parseInt(match.groups.hour), Number.parseInt(match.groups.minute));
    }
    setted(components) {
        const date = new Date(Date.UTC(this.year, this.month, this.day, this.hour, this.minute));
        date.setUTCFullYear(components.year ?? date.getUTCFullYear());
        date.setUTCMonth((components.month ?? date.getUTCMonth()) - 1);
        date.setUTCDate(components.day ?? date.getUTCDate());
        date.setUTCHours(components.hour ?? date.getUTCHours());
        date.setUTCMinutes(components.minute ?? date.getUTCMinutes());
        return UtcDate.fromDate(date);
    }
    advanced(components) {
        const date = new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute));
        date.setUTCFullYear(date.getUTCFullYear() + (components.year ?? 0));
        date.setUTCMonth(date.getUTCMonth() + (components.month ?? 0));
        date.setUTCDate(date.getUTCDate() + (components.day ?? 0));
        date.setUTCHours(date.getUTCHours() + (components.hour ?? 0));
        date.setUTCMinutes(date.getUTCMinutes() + (components.minute ?? 0));
        return UtcDate.fromDate(date);
    }
    compare(other) {
        if (this.year < other.year)
            return 'less';
        else if (this.year > other.year)
            return 'greater';
        if (this.month < other.month)
            return 'less';
        else if (this.month > other.month)
            return 'greater';
        if (this.day < other.day)
            return 'less';
        else if (this.day > other.day)
            return 'greater';
        if (this.hour < other.hour)
            return 'less';
        else if (this.hour > other.hour)
            return 'greater';
        if (this.minute < other.minute)
            return 'less';
        else if (this.minute > other.minute)
            return 'greater';
        return 'equal';
    }
    get flatten() {
        return this.encoded;
    }
}
exports.UtcDate = UtcDate;
