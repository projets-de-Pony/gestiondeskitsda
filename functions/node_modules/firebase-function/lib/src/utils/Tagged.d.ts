import type { ILogger } from '../logger';
import type { ITypeBuilder } from '../typeBuilder';
import type { Flattable } from './Flattable';
import { Guid } from './Guid';
export declare class Tagged<T, Tag> implements Flattable<T> {
    readonly value: T;
    readonly tag: Tag;
    constructor(value: T, tag: Tag);
    get flatten(): T;
    static generate<Tag>(tag: Tag): Tagged<Guid, Tag>;
    get guidString(): T extends Guid ? string : never;
}
export declare namespace Tagged {
    type TypeOf<T extends Tagged<any, any>> = T extends Tagged<infer V, any> ? V : never;
    type TagOf<T extends Tagged<any, any>> = T extends Tagged<any, infer Tag> ? Tag : never;
}
export declare class TaggedTypeBuilder<V, T extends Tagged<any, any>> implements ITypeBuilder<V, T> {
    private readonly tag;
    private readonly builder;
    constructor(tag: Tagged.TagOf<T>, builder: ITypeBuilder<V, Tagged.TypeOf<T>>);
    build(value: V, logger: ILogger): T;
}
