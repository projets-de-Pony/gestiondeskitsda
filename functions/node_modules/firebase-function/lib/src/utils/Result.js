"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Result = void 0;
var Result;
(function (Result) {
    class Success {
        value;
        state = 'success';
        constructor(value) {
            this.value = value;
        }
        // eslint-disable-next-line @typescript-eslint/class-literal-property-style
        get error() {
            return null;
        }
        get valueOrError() {
            return this.value;
        }
        get() {
            return this.value;
        }
        map(mapper) {
            return new Result.Success(mapper(this.value));
        }
        mapError() {
            return this;
        }
    }
    Result.Success = Success;
    class Failure {
        error;
        state = 'failure';
        constructor(error) {
            this.error = error;
        }
        // eslint-disable-next-line @typescript-eslint/class-literal-property-style
        get value() {
            return null;
        }
        get valueOrError() {
            return this.error;
        }
        get() {
            // eslint-disable-next-line @typescript-eslint/no-throw-literal
            throw this.error;
        }
        map() {
            return this;
        }
        mapError(mapper) {
            return new Result.Failure(mapper(this.error));
        }
    }
    Result.Failure = Failure;
    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
    function success(value) {
        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
        return new Result.Success(value);
    }
    Result.success = success;
    function failure(error) {
        return new Result.Failure(error);
    }
    Result.failure = failure;
    function isSuccess(result) {
        return result.state === 'success';
    }
    Result.isSuccess = isSuccess;
    function isFailure(result) {
        return result.state === 'failure';
    }
    Result.isFailure = isFailure;
    function from(value) {
        if (typeof value !== 'object' || value === null)
            throw new Error('Expected an object');
        if (!('state' in value))
            throw new Error('Expected a state property');
        if (value.state === 'success') {
            if (!('value' in value))
                throw new Error('Expected a value property');
            return success(value.value);
        }
        if (value.state === 'failure') {
            if (!('error' in value))
                throw new Error('Expected an error property');
            return failure(value.error);
        }
        throw new Error('Expected a state property with value success or failure');
    }
    Result.from = from;
})(Result = exports.Result || (exports.Result = {}));
