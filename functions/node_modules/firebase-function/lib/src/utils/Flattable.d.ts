export interface Flattable<Flatten> {
    flatten: Flatten;
}
export type Flatten<T> = T extends Flattable<infer U> ? Flatten<U> : T extends undefined | null | boolean | number | bigint | string ? T : T extends [infer U, ...(infer V)] ? [Flatten<U>, ...Flatten<V>] : T extends (infer U)[] ? Flatten<U>[] : T extends Record<string, unknown> ? {
    [K in keyof T]: Flatten<T[K]>;
} : never;
export declare namespace Flattable {
    function flatten<T>(value: T): Flatten<T>;
}
