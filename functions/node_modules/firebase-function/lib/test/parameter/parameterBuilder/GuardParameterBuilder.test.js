"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../src");
const testSrc_1 = require("../../../src/testSrc");
describe('GuardParameterBuilder', () => {
    const logger = new src_1.VoidLogger();
    it('undefined', () => {
        const builder = new src_1.GuardParameterBuilder('undefined', (value) => true);
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['undefined']));
        // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression
        (0, testSrc_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.equal(undefined);
    });
    it('boolean', () => {
        const builder = new src_1.GuardParameterBuilder('boolean', (value) => value);
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['boolean']));
        (0, testSrc_1.expect)(builder.build(true, logger.nextIndent)).to.be.equal(true);
        (0, testSrc_1.expect)(() => builder.build(false, logger.nextIndent)).to.throw();
    });
    it('string', () => {
        const builder = new src_1.GuardParameterBuilder('string', (value) => value === 'a' || value === 'b');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['string']));
        (0, testSrc_1.expect)(builder.build('a', logger.nextIndent)).to.be.equal('a');
        (0, testSrc_1.expect)(builder.build('b', logger.nextIndent)).to.be.equal('b');
        (0, testSrc_1.expect)(() => builder.build('c', logger.nextIndent)).to.throw();
        (0, testSrc_1.expect)(() => builder.build('', logger.nextIndent)).to.throw();
    });
    it('number', () => {
        const builder = new src_1.GuardParameterBuilder('number', (value) => value === 1 || value === 2);
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['number']));
        (0, testSrc_1.expect)(builder.build(1, logger.nextIndent)).to.be.equal(1);
        (0, testSrc_1.expect)(builder.build(2, logger.nextIndent)).to.be.equal(2);
        (0, testSrc_1.expect)(() => builder.build(3, logger.nextIndent)).to.throw();
    });
    it('bigint', () => {
        const builder = new src_1.GuardParameterBuilder('bigint', (value) => value === 1n || value === 2n);
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['bigint']));
        (0, testSrc_1.expect)(builder.build(1n, logger.nextIndent)).to.be.equal(1n);
        (0, testSrc_1.expect)(builder.build(2n, logger.nextIndent)).to.be.equal(2n);
        (0, testSrc_1.expect)(() => builder.build(3n, logger.nextIndent)).to.throw();
    });
    it('object', () => {
        const builder = new src_1.GuardParameterBuilder('object', (value) => value !== null && 'value' in value && typeof value.value === 'string');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object']));
        (0, testSrc_1.expect)(builder.build({ value: 'asdf' }, logger.nextIndent)).to.be.deep.equal({ value: 'asdf' });
        (0, testSrc_1.expect)(() => builder.build(null, logger.nextIndent)).to.throw();
        (0, testSrc_1.expect)(() => builder.build({}, logger.nextIndent)).to.throw();
        (0, testSrc_1.expect)(() => builder.build({ value: 0 }, logger.nextIndent)).to.throw();
    });
});
