"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../src");
const testSrc_1 = require("../../../src/testSrc");
describe('ArrayParameterBuilder', () => {
    const logger = new src_1.VoidLogger();
    it('with length', () => {
        const builder = new src_1.ArrayParameterBuilder(new src_1.ValueParameterBuilder('number'), 2);
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object']));
        (0, testSrc_1.expect)(() => builder.build([], logger.nextIndent)).to.throw();
        (0, testSrc_1.expect)(() => builder.build([0], logger.nextIndent)).to.throw();
        (0, testSrc_1.expect)(builder.build([0, 1], logger.nextIndent)).to.be.deep.equal([0, 1]);
        (0, testSrc_1.expect)(() => builder.build([0, 1, 2], logger.nextIndent)).to.throw();
    });
    it('undefined', () => {
        const builder = new src_1.ArrayParameterBuilder(new src_1.ValueParameterBuilder('undefined'));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object']));
        (0, testSrc_1.expect)(() => builder.build(null, logger.nextIndent)).to.throw();
        (0, testSrc_1.expect)(() => builder.build({ value: 'asdf' }, logger.nextIndent)).to.throw();
        (0, testSrc_1.expect)(() => builder.build([0, 1, 2], logger.nextIndent)).to.throw();
        (0, testSrc_1.expect)(builder.build([], logger.nextIndent)).to.be.deep.equal([]);
        (0, testSrc_1.expect)(builder.build([undefined], logger.nextIndent)).to.be.deep.equal([undefined]);
    });
    it('number', () => {
        const builder = new src_1.ArrayParameterBuilder(new src_1.ValueParameterBuilder('number'));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object']));
        (0, testSrc_1.expect)(builder.build([], logger.nextIndent)).to.be.deep.equal([]);
        (0, testSrc_1.expect)(builder.build([0, 1, 2], logger.nextIndent)).to.be.deep.equal([0, 1, 2]);
    });
    it('build', () => {
        const builder = new src_1.ArrayParameterBuilder(new src_1.ParameterBuilder('number', value => value.toString()));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object']));
        (0, testSrc_1.expect)(builder.build([], logger.nextIndent)).to.be.deep.equal([]);
        (0, testSrc_1.expect)(builder.build([0, 1, 2], logger.nextIndent)).to.be.deep.equal(['0', '1', '2']);
    });
    it('optional', () => {
        const builder = new src_1.ArrayParameterBuilder(new src_1.OptionalParameterBuilder(new src_1.ValueParameterBuilder('string')));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object']));
        (0, testSrc_1.expect)(builder.build([], logger.nextIndent)).to.be.deep.equal([]);
        (0, testSrc_1.expect)(builder.build(['0', undefined, '1', undefined, undefined, '2'], logger.nextIndent)).to.be.deep.equal(['0', undefined, '1', undefined, undefined, '2']);
    });
});
