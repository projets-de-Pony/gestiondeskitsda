"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../src");
const testSrc_1 = require("../../../src/testSrc");
describe('NullableParameterBuilder', () => {
    const logger = new src_1.VoidLogger();
    it('undefined', () => {
        const builder = new src_1.NullableParameterBuilder(new src_1.ValueParameterBuilder('undefined'));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object', 'undefined']));
        (0, testSrc_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.equal(undefined);
        (0, testSrc_1.expect)(builder.build(null, logger.nextIndent)).to.be.equal(null);
        (0, testSrc_1.expect)(() => builder.build({ value: 0 }, logger.nextIndent)).to.throw();
    });
    it('number', () => {
        const builder = new src_1.NullableParameterBuilder(new src_1.ValueParameterBuilder('number'));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object', 'number']));
        (0, testSrc_1.expect)(builder.build(1, logger.nextIndent)).to.be.equal(1);
        (0, testSrc_1.expect)(builder.build(null, logger.nextIndent)).to.be.equal(null);
        (0, testSrc_1.expect)(() => builder.build({ value: 0 }, logger.nextIndent)).to.throw();
    });
    it('object', () => {
        const builder = new src_1.NullableParameterBuilder(new src_1.ValueParameterBuilder('object'));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object']));
        (0, testSrc_1.expect)(builder.build(null, logger.nextIndent)).to.be.equal(null);
        (0, testSrc_1.expect)(builder.build({ value: 0 }, logger.nextIndent)).to.be.deep.equal({ value: 0 });
    });
    it('multiple nullable', () => {
        const builder = new src_1.NullableParameterBuilder(new src_1.NullableParameterBuilder(new src_1.NullableParameterBuilder(new src_1.ValueParameterBuilder('number'))));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object', 'number']));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object', 'number']));
        (0, testSrc_1.expect)(builder.build(1, logger.nextIndent)).to.be.equal(1);
        (0, testSrc_1.expect)(builder.build(null, logger.nextIndent)).to.be.equal(null);
        (0, testSrc_1.expect)(() => builder.build({ value: 0 }, logger.nextIndent)).to.throw();
    });
});
