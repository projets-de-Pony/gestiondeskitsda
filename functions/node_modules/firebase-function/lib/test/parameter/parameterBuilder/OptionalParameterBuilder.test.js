"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../src");
const testSrc_1 = require("../../../src/testSrc");
describe('OptionalParameterBuilder', () => {
    const logger = new src_1.VoidLogger();
    it('undefined', () => {
        const builder = new src_1.OptionalParameterBuilder(new src_1.ValueParameterBuilder('undefined'));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['undefined']));
        // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression
        (0, testSrc_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.equal(undefined);
    });
    it('number', () => {
        const builder = new src_1.OptionalParameterBuilder(new src_1.ValueParameterBuilder('number'));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['undefined', 'number']));
        (0, testSrc_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.equal(undefined);
        (0, testSrc_1.expect)(builder.build(0, logger.nextIndent)).to.be.equal(0);
    });
    it('multiple optional', () => {
        const builder = new src_1.OptionalParameterBuilder(new src_1.OptionalParameterBuilder(new src_1.OptionalParameterBuilder(new src_1.ValueParameterBuilder('number'))));
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['undefined', 'number']));
        (0, testSrc_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.equal(undefined);
        (0, testSrc_1.expect)(builder.build(0, logger.nextIndent)).to.be.equal(0);
    });
});
