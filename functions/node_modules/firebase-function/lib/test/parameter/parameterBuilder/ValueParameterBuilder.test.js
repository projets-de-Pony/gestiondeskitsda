"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../src");
const testSrc_1 = require("../../../src/testSrc");
describe('ValueParameterBuilder', () => {
    const logger = new src_1.VoidLogger();
    it('undefined', () => {
        const builder = new src_1.ValueParameterBuilder('undefined');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['undefined']));
        // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression
        (0, testSrc_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.equal(undefined);
    });
    it('boolean', () => {
        const builder = new src_1.ValueParameterBuilder('boolean');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['boolean']));
        (0, testSrc_1.expect)(builder.build(true, logger.nextIndent)).to.be.equal(true);
        (0, testSrc_1.expect)(builder.build(false, logger.nextIndent)).to.be.equal(false);
    });
    it('string', () => {
        const builder = new src_1.ValueParameterBuilder('string');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['string']));
        (0, testSrc_1.expect)(builder.build('', logger.nextIndent)).to.be.equal('');
        (0, testSrc_1.expect)(builder.build('asdf', logger.nextIndent)).to.be.equal('asdf');
    });
    it('number', () => {
        const builder = new src_1.ValueParameterBuilder('number');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['number']));
        (0, testSrc_1.expect)(builder.build(0, logger.nextIndent)).to.be.equal(0);
        (0, testSrc_1.expect)(builder.build(1.5, logger.nextIndent)).to.be.equal(1.5);
        (0, testSrc_1.expect)(builder.build(-5, logger.nextIndent)).to.be.equal(-5);
    });
    it('bigint', () => {
        const builder = new src_1.ValueParameterBuilder('bigint');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['bigint']));
        (0, testSrc_1.expect)(builder.build(0n, logger.nextIndent)).to.be.equal(0n);
        (0, testSrc_1.expect)(builder.build(357636n, logger.nextIndent)).to.be.equal(357636n);
        (0, testSrc_1.expect)(builder.build(-5n, logger.nextIndent)).to.be.equal(-5n);
    });
    it('symbol', () => {
        const builder = new src_1.ValueParameterBuilder('symbol');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['symbol']));
        (0, testSrc_1.expect)(builder.build(Symbol.iterator, logger.nextIndent)).to.be.equal(Symbol.iterator);
    });
    it('object', () => {
        const builder = new src_1.ValueParameterBuilder('object');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['object']));
        (0, testSrc_1.expect)(builder.build(null, logger.nextIndent)).to.be.equal(null);
        (0, testSrc_1.expect)(builder.build({}, logger.nextIndent)).to.be.deep.equal({});
        (0, testSrc_1.expect)(builder.build({ v1: 'asdf' }, logger.nextIndent)).to.be.deep.equal({ v1: 'asdf' });
        (0, testSrc_1.expect)(builder.build([], logger.nextIndent)).to.be.deep.equal([]);
        (0, testSrc_1.expect)(builder.build([0, 1, 2], logger.nextIndent)).to.be.deep.equal([0, 1, 2]);
    });
    it('function', () => {
        const builder = new src_1.ValueParameterBuilder('function');
        (0, testSrc_1.expect)(builder.expectedTypes).to.be.deep.equal(new Set(['function']));
        function function1() { }
        (0, testSrc_1.expect)(builder.build(function1, logger.nextIndent)).to.be.equal(function1);
        function function2(value) {
            return `${value}asdf`;
        }
        (0, testSrc_1.expect)(builder.build(function2, logger.nextIndent)).to.be.equal(function2);
    });
});
