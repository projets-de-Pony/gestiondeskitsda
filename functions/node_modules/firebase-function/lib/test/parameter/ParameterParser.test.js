"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const functions = __importStar(require("firebase-functions"));
const src_1 = require("../../src");
const testSrc_1 = require("../../src/testSrc");
class StringClassType {
    value;
    constructor(value) {
        this.value = value;
    }
}
(function (StringClassType) {
    function fromString(value, logger) {
        if (value !== 'v1' && value !== 'v2' && value !== 'v3')
            throw new functions.https.HttpsError('internal', '', logger);
        return new StringClassType(value);
    }
    StringClassType.fromString = fromString;
})(StringClassType || (StringClassType = {}));
class NumberClassType {
    value;
    constructor(value) {
        this.value = value;
    }
}
(function (NumberClassType) {
    function fromNumber(value) {
        return new NumberClassType(value);
    }
    NumberClassType.fromNumber = fromNumber;
})(NumberClassType || (NumberClassType = {}));
class ObjectClassType {
    v1;
    v2;
    constructor(v1, v2) {
        this.v1 = v1;
        this.v2 = v2;
    }
}
(function (ObjectClassType) {
    function fromObject(value, logger) {
        if (value === null)
            throw new functions.https.HttpsError('internal', '', logger);
        if (!('v1' in value) || typeof value.v1 !== 'string')
            throw new functions.https.HttpsError('internal', '', logger);
        if (!('v2' in value) || typeof value.v2 !== 'number')
            throw new functions.https.HttpsError('internal', '', logger);
        return new ObjectClassType(value.v1, value.v2);
    }
    ObjectClassType.fromObject = fromObject;
})(ObjectClassType || (ObjectClassType = {}));
describe('ParameterParser', () => {
    const logger = new src_1.VoidLogger();
    function testParameterParser(parameterToParse, builders, expectedParameters) {
        const parameterContainer = new src_1.ParameterContainer(parameterToParse, logger.nextIndent);
        const parameterParser = new src_1.ParameterParser(builders, logger.nextIndent);
        (0, testSrc_1.expect)(parameterParser.parse(parameterContainer)).to.be.deep.equal(expectedParameters);
    }
    it('empty parameter', () => {
        testParameterParser({}, {}, {});
    });
    it('only primitive types and object', () => {
        testParameterParser({
            value1: 'asdf',
            value2: 12,
            value3: {
                subValue1: 'ghjk',
                subValue2: 98
            }
        }, {
            value1: new src_1.ValueParameterBuilder('string'),
            value2: new src_1.ValueParameterBuilder('number'),
            value3: new src_1.ValueParameterBuilder('object')
        }, {
            value1: 'asdf',
            value2: 12,
            value3: {
                subValue1: 'ghjk',
                subValue2: 98
            }
        });
    });
    it('only builders', () => {
        testParameterParser({
            value1: 'v1',
            value2: 12.50,
            value3: {
                v1: 'a',
                v2: 3
            }
        }, {
            value1: new src_1.ParameterBuilder('string', StringClassType.fromString),
            value2: new src_1.ParameterBuilder('number', NumberClassType.fromNumber),
            value3: new src_1.ParameterBuilder('object', ObjectClassType.fromObject)
        }, {
            value1: new StringClassType('v1'),
            value2: new NumberClassType(12.50),
            value3: new ObjectClassType('a', 3)
        });
    });
    it('primitive types, object and builders', () => {
        testParameterParser({
            value1: 23.9,
            value2: 'v3'
        }, {
            value1: new src_1.ValueParameterBuilder('number'),
            value2: new src_1.ParameterBuilder('string', StringClassType.fromString)
        }, {
            value1: 23.9,
            value2: new StringClassType('v3')
        });
    });
    it('builder throws', () => {
        (0, testSrc_1.expect)(() => {
            testParameterParser({
                value1: 'invalid'
            }, {
                value1: new src_1.ParameterBuilder('string', StringClassType.fromString)
            }, {
                value1: new StringClassType('v1')
            });
        }).to.throw('internal');
    });
    it('guard builder', () => {
        testParameterParser({
            value: 'b'
        }, {
            value: new src_1.GuardParameterBuilder('string', (value) => value === 'a' || value === 'b')
        }, {
            value: 'b'
        });
    });
    it('optional builder', () => {
        testParameterParser({
            value1a: 12,
            value1b: undefined,
            value2a: 'a',
            value2b: undefined,
            value3a: 'testing',
            value3b: undefined,
            value4a: undefined
        }, {
            value1a: new src_1.OptionalParameterBuilder(new src_1.ValueParameterBuilder('number')),
            value1b: new src_1.OptionalParameterBuilder(new src_1.ValueParameterBuilder('number')),
            value2a: new src_1.OptionalParameterBuilder(new src_1.GuardParameterBuilder('string', (value) => value === 'a' || value === 'b')),
            value2b: new src_1.OptionalParameterBuilder(new src_1.GuardParameterBuilder('string', (value) => value === 'a' || value === 'b')),
            value4a: new src_1.OptionalParameterBuilder(new src_1.ParameterBuilder('undefined', (value) => value))
        }, {
            value1a: 12,
            value1b: undefined,
            value2a: 'a',
            value2b: undefined,
            value4a: undefined
        });
    });
    it('invalid type', () => {
        (0, testSrc_1.expect)(() => {
            testParameterParser({
                value: 'asdf'
            }, {
                value: { expectedTypes: new Set(['number']), build: (value) => value.toString() }
            }, {
                value: 'asdf'
            });
        }).to.throw('invalid-argument');
    });
    it('invalid undefined type', () => {
        (0, testSrc_1.expect)(() => {
            testParameterParser({
                value: undefined
            }, {
                value: { expectedTypes: new Set(['number']), build: (value) => value.toString() }
            }, {
                value: 'asdf'
            });
        }).to.throw('invalid-argument');
    });
    it('failed guard builder', () => {
        (0, testSrc_1.expect)(() => {
            testParameterParser({
                value: 'c'
            }, {
                value: new src_1.GuardParameterBuilder('string', (value) => value === 'a' || value === 'b')
            }, {
                value: 'a'
            });
        }).to.throw('invalid-argument');
    });
});
