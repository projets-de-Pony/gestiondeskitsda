"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const src_1 = require("../../../src");
const testSrc_1 = require("../../../src/testSrc");
describe('ISOIEC7864Padding', () => {
    const padding = new src_1.ISOIEC7864Padding();
    it('add padding', () => {
        const dataLength15 = (0, crypto_1.randomBytes)(15);
        const dataLength16 = (0, crypto_1.randomBytes)(16);
        const dataLength20 = (0, crypto_1.randomBytes)(20);
        (0, testSrc_1.expect)(padding.addPadding(dataLength15, 16)).to.be.deep.equal(new Uint8Array([...dataLength15, 0x80]));
        (0, testSrc_1.expect)(padding.addPadding(dataLength16, 16)).to.be.deep.equal(new Uint8Array([...dataLength16, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
        (0, testSrc_1.expect)(padding.addPadding(dataLength20, 16)).to.be.deep.equal(new Uint8Array([...dataLength20, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
    });
    it('remove padding', () => {
        const dataLength15 = (0, crypto_1.randomBytes)(15);
        const dataLength16 = (0, crypto_1.randomBytes)(16);
        const dataLength20 = (0, crypto_1.randomBytes)(20);
        (0, testSrc_1.expect)(padding.removePadding(new Uint8Array([...dataLength15, 0x80]))).to.be.deep.equal(dataLength15);
        (0, testSrc_1.expect)(padding.removePadding(new Uint8Array([...dataLength16, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))).to.be.deep.equal(dataLength16);
        (0, testSrc_1.expect)(padding.removePadding(new Uint8Array([...dataLength20, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))).to.be.deep.equal(dataLength20);
    });
    it('add and remove padding', () => {
        for (let i = 1; i < 16; i++) {
            for (let j = 0; j <= i; j++) {
                const data = (0, crypto_1.randomBytes)(j);
                const paddedData = padding.addPadding(data, i);
                (0, testSrc_1.expect)(paddedData.length % i).to.be.equal(0);
                const unpaddedData = padding.removePadding(paddedData);
                (0, testSrc_1.expect)(unpaddedData).to.be.deep.equal(data);
            }
        }
    });
});
