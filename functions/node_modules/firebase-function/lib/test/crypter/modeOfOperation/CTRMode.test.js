"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const src_1 = require("../../../src");
const testSrc_1 = require("../../../src/testSrc");
const aes_ts_1 = require("aes-ts");
describe('CTRMode', () => {
    it('increment counter', () => {
        const ctrMode = new src_1.CTRMode();
        ctrMode.counter = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        ctrMode.incrementCounter();
        (0, testSrc_1.expect)(ctrMode.counter).to.be.deep.equal(new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]));
        ctrMode.counter = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255]);
        ctrMode.incrementCounter();
        (0, testSrc_1.expect)(ctrMode.counter).to.be.deep.equal(new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]));
        ctrMode.counter = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
        ctrMode.incrementCounter();
        (0, testSrc_1.expect)(ctrMode.counter).to.be.deep.equal(new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]));
        ctrMode.counter = new Uint8Array([255, 255, 45, 87, 221, 198, 7, 255, 34, 252, 255, 146, 0, 65, 255, 56]);
        ctrMode.incrementCounter();
        (0, testSrc_1.expect)(ctrMode.counter).to.be.deep.equal(new Uint8Array([255, 255, 45, 87, 221, 198, 7, 255, 34, 252, 255, 146, 0, 65, 255, 57]));
        ctrMode.counter = new Uint8Array([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
        ctrMode.incrementCounter();
        (0, testSrc_1.expect)(ctrMode.counter).to.be.deep.equal(new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
        ctrMode.counter = new Uint8Array([255, 255, 45, 87, 221, 198, 7, 255, 34, 252, 255, 146, 0, 65, 255, 56]);
        for (let i = 0; i < 1030; i++)
            ctrMode.incrementCounter();
        (0, testSrc_1.expect)(ctrMode.counter).to.be.deep.equal(new Uint8Array([255, 255, 45, 87, 221, 198, 7, 255, 34, 252, 255, 146, 0, 66, 3, 62]));
    });
    function incremented(counter, times = 1) {
        const ctrMode = new src_1.CTRMode();
        ctrMode.counter = new Uint8Array(counter);
        for (let i = 0; i < times; i++)
            ctrMode.incrementCounter();
        return ctrMode.counter;
    }
    it('encrypt', () => {
        const modeOfOperation = new src_1.CTRMode();
        const counter = new Uint8Array(modeOfOperation.startEncryption());
        const block1 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        const block2 = (0, crypto_1.randomBytes)(16);
        const block3 = (0, crypto_1.randomBytes)(16);
        const encrypted1 = modeOfOperation.combineEncryption(block1, block => block);
        const encrypted2 = modeOfOperation.combineEncryption(block2, block => block);
        const encrypted3 = modeOfOperation.combineEncryption(block3, block => block);
        (0, testSrc_1.expect)(encrypted1).to.be.deep.equal(incremented(counter, 1));
        (0, testSrc_1.expect)(encrypted2).to.be.deep.equal((0, src_1.xor)(block2, incremented(counter, 2)));
        (0, testSrc_1.expect)(encrypted3).to.be.deep.equal((0, src_1.xor)(block3, incremented(counter, 3)));
        (0, testSrc_1.expect)(modeOfOperation.finishEncryption()).to.be.deep.equal(new Uint8Array());
    });
    it('decrypt', () => {
        const modeOfOperation = new src_1.CTRMode();
        (0, testSrc_1.expect)(modeOfOperation.startDecryption()).to.be.deep.equal(new Uint8Array());
        const counter = (0, crypto_1.randomBytes)(16);
        const block1 = new Uint8Array(counter);
        const block2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        const block3 = (0, crypto_1.randomBytes)(16);
        const decrypted1 = modeOfOperation.combineDecryption(block1, block => block);
        const decrypted2 = modeOfOperation.combineDecryption(block2, block => block);
        const decrypted3 = modeOfOperation.combineDecryption(block3, block => block);
        (0, testSrc_1.expect)(decrypted1).to.be.deep.equal(new Uint8Array());
        (0, testSrc_1.expect)(decrypted2).to.be.deep.equal(incremented(counter, 1));
        (0, testSrc_1.expect)(decrypted3).to.be.deep.equal((0, src_1.xor)(block3, incremented(counter, 2)));
        (0, testSrc_1.expect)(modeOfOperation.finishDecryption()).to.be.deep.equal(new Uint8Array());
    });
    it('encrypt and decrypt trivial', () => {
        const modeOfOperation = new src_1.CTRMode();
        const counter = new Uint8Array(modeOfOperation.startEncryption());
        const block1 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        const block2 = (0, crypto_1.randomBytes)(16);
        const block3 = (0, crypto_1.randomBytes)(16);
        const encrypted1 = modeOfOperation.combineEncryption(block1, block => block);
        const encrypted2 = modeOfOperation.combineEncryption(block2, block => block);
        const encrypted3 = modeOfOperation.combineEncryption(block3, block => block);
        modeOfOperation.finishEncryption();
        modeOfOperation.startDecryption();
        modeOfOperation.combineDecryption(counter, block => block);
        const decrypted1 = modeOfOperation.combineDecryption(encrypted1, block => block);
        const decrypted2 = modeOfOperation.combineDecryption(encrypted2, block => block);
        const decrypted3 = modeOfOperation.combineDecryption(encrypted3, block => block);
        modeOfOperation.finishDecryption();
        (0, testSrc_1.expect)(decrypted1).to.be.deep.equal(block1);
        (0, testSrc_1.expect)(decrypted2).to.be.deep.equal(block2);
        (0, testSrc_1.expect)(decrypted3).to.be.deep.equal(block3);
    });
    it('encrypt and decrypt aes', () => {
        const blockCrypter = new aes_ts_1.Block((0, crypto_1.randomBytes)(16));
        const modeOfOperation = new src_1.CTRMode();
        const counter = new Uint8Array(modeOfOperation.startEncryption());
        const block1 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        const block2 = (0, crypto_1.randomBytes)(16);
        const block3 = (0, crypto_1.randomBytes)(16);
        const encrypted1 = modeOfOperation.combineEncryption(block1, block => blockCrypter.encrypt(block));
        const encrypted2 = modeOfOperation.combineEncryption(block2, block => blockCrypter.encrypt(block));
        const encrypted3 = modeOfOperation.combineEncryption(block3, block => blockCrypter.encrypt(block));
        modeOfOperation.finishEncryption();
        modeOfOperation.startDecryption();
        modeOfOperation.combineDecryption(counter, block => blockCrypter.decrypt(block));
        const decrypted1 = modeOfOperation.combineDecryption(encrypted1, block => blockCrypter.decrypt(block));
        const decrypted2 = modeOfOperation.combineDecryption(encrypted2, block => blockCrypter.decrypt(block));
        const decrypted3 = modeOfOperation.combineDecryption(encrypted3, block => blockCrypter.decrypt(block));
        modeOfOperation.finishDecryption();
        (0, testSrc_1.expect)(decrypted1).to.be.deep.equal(block1);
        (0, testSrc_1.expect)(decrypted2).to.be.deep.equal(block2);
        (0, testSrc_1.expect)(decrypted3).to.be.deep.equal(block3);
    });
});
