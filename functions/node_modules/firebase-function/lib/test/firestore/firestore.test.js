"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src");
const admin = __importStar(require("firebase-admin"));
const dotenv = __importStar(require("dotenv"));
const testSrc_1 = require("../../src/testSrc");
describe('Firestore', () => {
    // eslint-disable-next-line @typescript-eslint/init-declarations
    let baseCollection;
    before(() => {
        dotenv.config({ path: 'test/.env.test' });
        admin.initializeApp({
            credential: admin.credential.cert({
                projectId: process.env.FIREBASE_PROJECT_ID,
                privateKey: process.env.FIREBASE_PRIVATE_KEY,
                clientEmail: process.env.FIREBASE_CLIENT_EMAIL
            }),
            databaseURL: process.env.FIREBASE_DATABASE_URL
        });
        baseCollection = new src_1.FirestoreCollection(admin.app().firestore(), new src_1.FirestorePath('test'));
    });
    afterEach(async () => {
        const allDocs = await admin.app().firestore().collection('test').listDocuments();
        await Promise.all(allDocs.map(async (doc) => doc.delete()));
    });
    async function addDocument() {
        const data = {
            v1: 'string',
            v2: 1,
            v3: true,
            v4: null,
            v5: new Uint8Array([1, 2, 3]),
            v6: {
                v7: ['a', 'b', 'c']
            },
            v8: [true, { v9: 2 }, null]
        };
        await baseCollection.document('ouja').set(data);
        return data;
    }
    it('add a document', async () => {
        const data = await addDocument();
        (0, testSrc_1.expect)((await baseCollection.document('ouja').snapshot()).data).to.be.deep.equal(src_1.Flattable.flatten(data));
    });
    it('remove a document', async () => {
        await addDocument();
        await baseCollection.document('ouja').remove();
        (0, testSrc_1.expect)((await baseCollection.document('ouja').snapshot()).exists).to.be.equal(false);
    });
    it('update documnent values', async () => {
        await addDocument();
        const newData = {
            v1: 'string2',
            v2: 2,
            v3: false,
            v4: null,
            v5: new Uint8Array([4, 5, 6, 7]),
            v6: {
                v7: ['d', 'e']
            },
            v8: [false, { v9: 0 }, null]
        };
        await baseCollection.document('ouja').set(newData);
        (0, testSrc_1.expect)((await baseCollection.document('ouja').snapshot()).data).to.be.deep.equal(src_1.Flattable.flatten(newData));
    });
    it('add document to subcollection', async () => {
        await baseCollection.document('asdf').collection('pipo').document('piou').set({ njd: true });
        (0, testSrc_1.expect)((await baseCollection.document('asdf').collection('pipo').document('piou').snapshot()).data).to.be.deep.equal({ njd: true });
    });
});
